// 연속 부분 수열 합의 개수
// 제출 내역
// 문제 설명
// 철호는 수열을 가지고 놀기 좋아합니다. 어느 날 철호는 어떤 자연수로 이루어진 원형 수열의 연속하는 부분 수열의 합으로 만들 수 있는 수가 모두 몇 가지인지 알아보고 싶어졌습니다.
//  원형 수열이란 일반적인 수열에서 처음과 끝이 연결된 형태의 수열을 말합니다. 예를 들어 수열 [7, 9, 1, 1, 4] 로 원형 수열을 만들면 다음과 같습니다.

// 원형 수열은 처음과 끝이 연결되어 끊기는 부분이 없기 때문에 연속하는 부분 수열도 일반적인 수열보다 많아집니다.
// 원형 수열의 모든 원소 elements가 순서대로 주어질 때, 원형 수열의 연속 부분 수열 합으로 만들 수 있는 수의 개수를 return 하도록 solution 함수를 완성해주세요.

// 제한사항
// 3 ≤ elements의 길이 ≤ 1,000
// 1 ≤ elements의 원소 ≤ 1,000
// 입출력 예
// elements	    result
// [7,9,1,1,4]	18
// 입출력 예 설명
// 입출력 예 #1
// 길이가 1인 연속 부분 수열로부터 [1, 4, 7, 9] 네 가지의 합이 나올 수 있습니다.         7 9 1 4
// 길이가 2인 연속 부분 수열로부터 [2, 5, 10, 11, 16] 다섯 가지의 합이 나올 수 있습니다.  79 91 11 14 47            16 10 2 5 11
// 길이가 3인 연속 부분 수열로부터 [6, 11, 12, 17, 20] 다섯 가지의 합이 나올 수 있습니다. 791 911 114 147 479       17 11 6 12 20
// 길이가 4인 연속 부분 수열로부터 [13, 15, 18, 21] 네 가지의 합이 나올 수 있습니다. 7911 9114 1147 1479 4791얘는 겹침   18 15 13 21
// 길이가 5인 연속 부분 수열로부터 [22] 한 가지의 합이 나올 수 있습니다. 79114                22
// 이들 중 중복되는 값을 제외하면 다음과 같은 18가지의 수들을 얻습니다.
// [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22]

// step 1. 중복 제거를 위한 빈 set 객체를 만든다.
// step 2. elements 배열을 순회하며 합을 구하고 그걸 step1의 set 객체에 집어넣음 add
// step 2-2 step2를 어떻게 할것인지 디테일인데 이부분을 잘모르겠음      elements를 앞뒤로 이어붙인 배열을 만들어서 처리
// step 3. set 객체의 길이를 반환 size

const solution = function (elements) {
	const n = elements.length;
	const set = new Set();

	const doubled = [...elements, ...elements];

	for (let length = 1; length <= n; length++) {
		for (let start = 0; start < n; start++) {
			let sum = 0;
			for (let i = 0; i < length; i++) {
				sum += doubled[start + i];
			}
			set.add(sum);
		}
	}

	return set.size;
};

console.log(solution([7, 9, 1, 1, 4]));
