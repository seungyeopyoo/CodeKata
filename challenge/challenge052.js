// 기사단원의 무기
// 숫자나라 기사단의 각 기사에게는 1번부터 number까지 번호가 지정되어 있습니다. 기사들은 무기점에서 무기를 구매하려고 합니다.

// 각 기사는 자신의 기사 번호의 약수 개수에 해당하는 공격력을 가진 무기를 구매하려 합니다.
// 단, 이웃나라와의 협약에 의해 공격력의 제한수치를 정하고, 제한수치보다 큰 공격력을 가진 무기를 구매해야 하는 기사는 협약기관에서 정한 공격력을 가지는 무기를 구매해야 합니다.

// 예를 들어, 15번으로 지정된 기사단원은 15의 약수가 1, 3, 5, 15로 4개 이므로, 공격력이 4인 무기를 구매합니다.
// 만약, 이웃나라와의 협약으로 정해진 공격력의 제한수치가 3이고 제한수치를 초과한 기사가 사용할 무기의 공격력이 2라면, 15번으로 지정된 기사단원은 무기점에서 공격력이 2인 무기를 구매합니다.
// 무기를 만들 때, 무기의 공격력 1당 1kg의 철이 필요합니다. 그래서 무기점에서 무기를 모두 만들기 위해 필요한 철의 무게를 미리 계산하려 합니다.

// 기사단원의 수를 나타내는 정수 number와 이웃나라와 협약으로 정해진 공격력의 제한수치를 나타내는 정수 limit와 제한수치를 초과한 기사가 사용할 무기의 공격력을 나타내는 정수 power가 주어졌을 때,
// 무기점의 주인이 무기를 모두 만들기 위해 필요한 철의 무게를 return 하는 solution 함수를 완성하시오.

// 1 ≤ number ≤ 100,000
// 2 ≤ limit ≤ 100
// 1 ≤ power ≤ limit

// number	        limit	        power	        result
// 5	      ,      3	       ,     2	            10
// 10	       ,     3	        ,    2	            21

// 1부터 5까지의 약수의 개수는 순서대로 [1, 2, 2, 3, 2]개입니다. 모두 공격력 제한 수치인 3을 넘지 않기 때문에 필요한 철의 무게는 해당 수들의 합인 10이 됩니다. 따라서 10을 return 합니다.
// 1부터 10까지의 약수의 개수는 순서대로 [1, 2, 2, 3, 2, 4, 2, 4, 3, 4]개입니다. 공격력의 제한수치가 3이기 때문에, 6, 8, 10번 기사는 공격력이 2인 무기를 구매합니다. 따라서 해당 수들의 합인 21을 return 합니다.

// step 1. 빈배열만든다
// step 2. 약수의 계수를 1에 push한다.
// step 3. step1.map으로 el이 limit 보다 크면 power로 바꾸고 아니면 그대로 .reduce합 구해다가 return
// for문 조건식을 j<= number 까지 했더니 시간초과나옴 ㅠ math.sqrt <- 제곱근까지 순회하고 16의 약수라고치면1 * 16 약수 2개 2*8 약수2개 인데 4*4 는 약수하나로 해야하니까 삼항연산자로 처리

const solution = function (number, limit, power) {
	const arrOfYaksu = [];

	for (let i = 1; i <= number; i++) {
		let count = 0;

		for (let j = 1; j <= Math.sqrt(i); j++) {
			if (i % j === 0) {
				count += j === i / j ? 1 : 2;
			}
		}
		arrOfYaksu.push(count);
	}
	return arrOfYaksu
		.map((el) => (el > limit ? power : el))
		.reduce((acc, cur) => acc + cur, 0);
};

console.log(solution(5, 3, 2));
console.log(solution(10, 3, 2));
