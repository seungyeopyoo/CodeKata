// 특별한 이차원 배열 1
// 정수 n이 매개변수로 주어질 때, 다음과 같은 n × n 크기의 이차원 배열 arr를 return 하는 solution 함수를 작성해 주세요.

// arr[i][j] (0 ≤ i, j < n)의 값은 i = j라면 1, 아니라면 0입니다.
// 1 ≤ n ≤ 100

// n	result
// 3	[[1, 0, 0], [0, 1, 0], [0, 0, 1]]
// 6	[[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]]
// 1	[[1]]

// i \ j	0	1	2
// 0	1	0	0
// 1	0	1	0
// 2	0	0	1
// 따라서 [[1, 0, 0], [0, 1, 0], [0, 0, 1]]을 return 합니다.

// i \ j	0	1	2	3	4	5
// 0	1	0	0	0	0	0
// 1	0	1	0	0	0	0
// 2	0	0	1	0	0	0
// 3	0	0	0	1	0	0
// 4	0	0	0	0	1	0
// 5	0	0	0	0	0	1
// 따라서 [[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]]을 return 합니다.

// 예제 1번의 n의 값은 1이고 다음과 같이 2차원 배열을 채울 수 있습니다.
// i \ j	0
// 0	1
// 따라서 [[1]]을 return 합니다.

// step 1.n만큼 길이의 배열을 만든다. 해당 배열은 각인덱스의 길이가n이고 ///  모두 0으로 채운다.
// step 2.1번 배열을 순회하며 i번째 인덱스의 i번째 인덱스에 1을 넣는다.

const solution = function (n) {
	const result = Array.from({ length: n }, () => Array(n).fill(0));

	for (let i = 0; i < result.length; i++) {
		result[i][i] = 1;
	}

	return result;
};

console.log(solution(3));
console.log(solution(6));
console.log(solution(1));
