// 평행
// 점 네 개의 좌표를 담은 이차원 배열  dots가 다음과 같이 매개변수로 주어집니다.

// [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]
// 주어진 네 개의 점을 두 개씩 이었을 때,
// 두 직선이 평행이 되는 경우가 있으면 1을 없으면 0을 return 하도록 solution 함수를 완성해보세요.

// dots의 길이 = 4
// dots의 원소는 [x, y] 형태이며 x, y는 정수입니다.
// 0 ≤ x, y ≤ 100
// 서로 다른 두개 이상의 점이 겹치는 경우는 없습니다.
// 두 직선이 겹치는 경우(일치하는 경우)에도 1을 return 해주세요.
// 임의의 두 점을 이은 직선이 x축 또는 y축과 평행한 경우는 주어지지 않습니다.
// dots	result
// [[1, 4], [9, 2], [3, 8], [11, 6]]	1
// [[3, 5], [4, 1], [2, 4], [5, 10]]	0

// 점 [1, 4], [3, 8]을 잇고 [9, 2], [11, 6]를 이으면 두 선분은 평행합니다.
// 점을 어떻게 연결해도 평행하지 않습니다.

const solution = function (dots) {
	const giulgi = (a, b) =>
		(dots[b][1] - dots[a][1]) / (dots[b][0] - dots[a][0]);

	if (giulgi(0, 1) === giulgi(2, 3)) return 1;
	if (giulgi(0, 2) === giulgi(1, 3)) return 1;
	if (giulgi(0, 3) === giulgi(1, 2)) return 1;

	return 0;
};

console.log(
	solution([
		[1, 4],
		[9, 2],
		[3, 8],
		[11, 6],
	])
);
console.log(
	solution([
		[3, 5],
		[4, 1],
		[2, 4],
		[5, 10],
	])
);
